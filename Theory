Theory for Finding Single Non-Duplicate Element in a Sorted Array
Problem Statement
We are given a sorted array nums where every element appears exactly twice, except for one single element that appears only once. The task is to find that single element in 
ùëÇ(log‚Å°ùëõ)
O(logn) time using binary search.

Key Observations
Array Characteristics:

The array is sorted.
Elements occur in pairs, except for the single non-duplicate element.
Behavior of Indexes:

Before the single element:
Pairs start at even indices and end at odd indices.
After the single element:
Pairs start at odd indices and end at even indices.
Binary Search Feasibility:

Using the above property, we can identify whether the single element lies in the left or right half of the array by examining the indices and the relationships between adjacent elements.
Algorithm Explanation
Handle Edge Cases:

If the array has only one element, return it directly (nums.size() == 1).
Check if the first or last element is the single element (e.g., nums[0] != nums[1] or nums[n-1] != nums[n-2]).
Binary Search:

Initialize two pointers, s (start) and e (end).
While s <= e:
Calculate the middle index: mid = s + (e - s) / 2.
Check if nums[mid] is the single element:
If nums[mid] != nums[mid-1] and nums[mid] != nums[mid+1], it is the single element.
Determine which half of the array contains the single element:
If nums[mid] == nums[mid + 1] and mid is even, or if nums[mid] == nums[mid - 1] and mid is odd, the single element is in the right half.
Otherwise, it is in the left half.
Return the Single Element:

The loop narrows down the search to a single element.
